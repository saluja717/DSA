#include <bits/stdc++.h> 

int size;
int merge(long long *arr,int i,int mid,int j)
{
    long long temp[size];
    int i1 = i,j1=mid+1,count=0,t=i;
    while(i1<=mid && j1<=j)
    {
         if(arr[i1]>arr[j1]){
             temp[t++]=arr[j1];
             j1++;
             count = count + (mid-i1+1);
         }
         else{
             temp[t++]=arr[i1];
             i1++;
         }
    }
    while(i1<=mid){
        temp[t++]=arr[i1];
        i1++;
    }
    while(j1<=j){
        temp[t++]=arr[j1];
        j1++;
    }
    for(int k=i;k<=j;k++)
    {
        arr[k]=temp[k];
    }
   //cout<<count<<endl;
    return count;
}

int merge_sort(long long *arr,int i,int j)
{
    int count=0;
    if(i<j)
    {
        int mid = (i+j)/2;
        count += merge_sort(arr,i,mid);
        count += merge_sort(arr,mid+1,j);
        count += merge(arr,i,mid,j);
        return count;
    }
    return 0;
}

long long getInversions(long long *arr, int n){
     
     size=n;
//    return merge_sort(arr,0,n-1);
     int c =merge_sort(arr,0,n-1);
     //for(int i=0;i<n;i++)cout<<arr[i]<<" ";
     return c;
}